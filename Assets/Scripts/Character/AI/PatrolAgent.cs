// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
using UnityEngine.EventSystems;
///<<< END WRITING YOUR CODE

namespace GameGeek.Character
{
///<<< BEGIN WRITING YOUR CODE NAMESPACE_INIT

    ///<<< END WRITING YOUR CODE

	public class PatrolAgent : GameGeek.Character.Character
///<<< BEGIN WRITING YOUR CODE PatrolAgent
    ///<<< END WRITING YOUR CODE
	{
		public float alertRadius = 0f;

		public float attackRange = 0f;

		public float chaseRadius = 0f;

		public GameGeek.Character.PatrolStatus currentStatus = GameGeek.Character.PatrolStatus.IDLE;

		public float defendRadius = 0f;

		public float runSpeed = 3f;

		public float turnSpeed = 0.1f;

		public float walkSpeed = 1f;

		public float wanderRadius = 0f;

		public GameGeek.Character.PatrolStatus CalculateNewPatrolState()
		{
///<<< BEGIN WRITING YOUR CODE CalculateNewPatrolState
            float distanceToTarget = Vector3.Distance(target.transform.position, transform.position);
            PatrolStatus newPatrolState = currentStatus;
            if (distanceToTarget < attackRange)
            {
                newPatrolState = PatrolStatus.BATTLE;
            }
            else if (distanceToTarget < defendRadius)
            {
                newPatrolState = PatrolStatus.CHASE;
            }
            else if (distanceToTarget < alertRadius)
            {
                newPatrolState = PatrolStatus.WARN;
            }

            if (distanceToTarget > wanderRadius)
            {
                newPatrolState = PatrolStatus.RETURN;
            }
            return newPatrolState;
            ///<<< END WRITING YOUR CODE
		}

		public void Chase()
		{
///<<< BEGIN WRITING YOUR CODE Chase
            ///<<< END WRITING YOUR CODE
		}

		public void ReturnBack()
		{
///<<< BEGIN WRITING YOUR CODE ReturnBack
            ///<<< END WRITING YOUR CODE
		}

		public void Wander()
		{
///<<< BEGIN WRITING YOUR CODE Wander
            bool isArriveNextPiont = Vector3.Distance(transform.position, walkFlagObjects[nextPointIndex].position) < 0.5f;
            if (isArriveNextPiont)
            {
                nextPointIndex++;
                nextPointIndex = nextPointIndex % walkFlagObjects.Length;
            }
            ForwardTargetPosition(walkFlagObjects[nextPointIndex].position);
            targetController.SimpleMove((walkFlagObjects[nextPointIndex].position - transform.position).normalized * runSpeed);

            ///<<< END WRITING YOUR CODE
		}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

        private GameObject target;
        private CharacterController targetController;
        private Animator animator;
        private Vector3 initPosition;

        public Transform[] walkFlagObjects;
        public int nextPointIndex = 0;

        void Start()
        {
            currentStatus = PatrolStatus.IDLE;
            animator = GetComponent<Animator>();
            initPosition = GetComponent<Transform>().position;
            targetController = GetComponent<CharacterController>();
            // walkFlagObjects = transform.Find("PatrolRange").GetComponentsInChildren<Transform>();

            //检查并修正怪物设置  
            //1. 自卫半径不大于警戒半径，否则就无法触发警戒状态，直接开始追击了  
            defendRadius = Mathf.Min(alertRadius, defendRadius);
            //2. 攻击距离不大于自卫半径，否则就无法触发追击状态，直接开始战斗了  
            attackRange = Mathf.Min(defendRadius, attackRange);
            //3. 游走半径不大于追击半径，否则怪物可能刚刚开始追击就返回出生点  
            wanderRadius = Mathf.Min(chaseRadius, wanderRadius);
        }

        void FixedUpdate()
        {
            Wander();
        }

        private void ForwardTargetPosition(Vector3 forwardTargetPosition)
        {
            Quaternion targetPosition = Quaternion.LookRotation(forwardTargetPosition - transform.position, Vector3.up);
            // Debug.Log("ForwardTargetPosition:"+targetPosition);
            // Debug.Log("ForwardTargetPosition:rotation:"+transform.rotation);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetPosition, turnSpeed);
        }
        ///<<< END WRITING YOUR CODE

	}

///<<< BEGIN WRITING YOUR CODE NAMESPACE_UNINIT

    ///<<< END WRITING YOUR CODE
}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

