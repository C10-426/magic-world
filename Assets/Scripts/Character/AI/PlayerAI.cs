// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
///<<< END WRITING YOUR CODE

namespace GameGeek.Character
{
///<<< BEGIN WRITING YOUR CODE NAMESPACE_INIT

    ///<<< END WRITING YOUR CODE

	public class PlayerAI : GameGeek.Character.CharacterPlayer
///<<< BEGIN WRITING YOUR CODE PlayerAI
    ///<<< END WRITING YOUR CODE
	{
		public behaviac.EBTStatus Idle()
		{
///<<< BEGIN WRITING YOUR CODE Idle
            return behaviac.EBTStatus.BT_INVALID;
            ///<<< END WRITING YOUR CODE
		}

		public bool IsUserControlMovement()
		{
///<<< BEGIN WRITING YOUR CODE IsUserControlMovement
            return moveJoyStick != null && moveJoyStick.MoveInput().x != 0;
            ///<<< END WRITING YOUR CODE
		}

		public behaviac.EBTStatus Move()
		{
///<<< BEGIN WRITING YOUR CODE Move
            if (IsUserControlMovement())
            {
                currentStatus = GameGeek.Character.PlayerStatus.RUN;
                Vector3 movement = moveJoyStick.MoveInput() * property.walkSpeed;
                charaterController.SimpleMove(movement);
                moveJoyStick.Rotate(transform, 15.0F);                           //Rotate rigidbody; 
                return behaviac.EBTStatus.BT_RUNNING;
            }
            return behaviac.EBTStatus.BT_RUNNING;
            ///<<< END WRITING YOUR CODE
		}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

        private static readonly string ANIMATOR_RUN = "Run";
        private static readonly string ANIMATOR_ATTACK = "Attack";
        private static readonly string ANIMATOR_IDLE = "Idle";

        public Joystick moveJoyStick;
        public AttackController attackController;
        public PlayerSkillsController skillController;
        private CharacterController charaterController;
        private Animator animator;

        private bool InitPlayerAI()
        {
            behaviac.Debug.LogWarning("InitPlayerAI");

            bool bRet = this.btload("PlayerAI");
            if (bRet)
            {
                this.btsetcurrent("PlayerAI");
                _status = behaviac.EBTStatus.BT_RUNNING;
            }

            return bRet;
        }

        void Awake()
        {
            InitPlayerAI();
            charaterController = GetComponent<CharacterController>();
            animator = GetComponent<Animator>();
            AddEventListener();
        }

        void AddEventListener()
        {
            // movement
            moveJoyStick.OnStartJoystickMovement += HandleMovement;
            moveJoyStick.OnJoystickMovement += HandleMovement;
            moveJoyStick.OnEndJoystickMovement += HandleEndMovement;
            // attack
            attackController.OnAttackClicked += HandleAttack;
            // skill
            skillController.OnPlayerSkillClicked += HandleSkill;
        }

        void HandleMovement(Joystick sender, Vector2 vector)
        {
            if (animator != null)
            {
                animator.SetBool(ANIMATOR_RUN, true);
            }
        }

        void HandleEndMovement(Joystick sender, Vector2 vector)
        {
            if (animator != null)
            {
                animator.SetBool(ANIMATOR_RUN, false);
                animator.SetTrigger(ANIMATOR_IDLE);
            }
        }

        void HandleAttack()
        {
            if (animator != null)
            {
                animator.SetTrigger(ANIMATOR_ATTACK);
            }
        }

        void HandleSkill(SkillData skillData)
        {
            if (null != skillData.getTrigger())
            {
                animator.SetTrigger(skillData.getTrigger());
            }
        }
        ///<<< END WRITING YOUR CODE

	}

///<<< BEGIN WRITING YOUR CODE NAMESPACE_UNINIT

    ///<<< END WRITING YOUR CODE
}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

