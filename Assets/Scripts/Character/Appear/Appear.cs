// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using GameGeek.Character;
using UnityEngine;
///<<< END WRITING YOUR CODE

namespace GameGeek.Character
{
///<<< BEGIN WRITING YOUR CODE NAMESPACE_INIT

    ///<<< END WRITING YOUR CODE

	public class Appear : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE Appear
    ///<<< END WRITING YOUR CODE
	{
		public string animationName = "";

		public bool isAppearActive = false;

		public behaviac.EBTStatus ActiveAppear()
		{
///<<< BEGIN WRITING YOUR CODE ActiveAppear
			if (animationName == "")
            {
                return behaviac.EBTStatus.BT_FAILURE;
            }

            animationPlayTime = 0f;
            isAppearActive = true;
            if (appearTimeOfDuration == 0)
            {
                appearTimeOfDuration = owner.GetComponent<Animation>()[animationName].length;
            }

            if (!IsLoopAnimation())
            {
                appearTimeOfDuration /= owner.GetComponent<Animation>()[animationName].speed;
            }

            PlayAnimation(owner, animationName);

            OnAppearActive();
            return behaviac.EBTStatus.BT_SUCCESS;
///<<< END WRITING YOUR CODE
		}

		public behaviac.EBTStatus DeactiveAppear()
		{
///<<< BEGIN WRITING YOUR CODE DeactiveAppear
			isAppearActive = false;
            if (animationName == "")
            {
                return behaviac.EBTStatus.BT_FAILURE;
            }
            StopAnimation(owner, animationName);
            return behaviac.EBTStatus.BT_SUCCESS;
///<<< END WRITING YOUR CODE
		}

		public bool IsAppearActive()
		{
///<<< BEGIN WRITING YOUR CODE IsAppearActive
			return isAppearActive && animationPlayTime < appearTimeOfDuration;
///<<< END WRITING YOUR CODE
		}

		public void OnAppearActive()
		{
///<<< BEGIN WRITING YOUR CODE OnAppearActive
///<<< END WRITING YOUR CODE
		}

		public void OnAppearDeactive()
		{
///<<< BEGIN WRITING YOUR CODE OnAppearDeactive
///<<< END WRITING YOUR CODE
		}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

        public AppearStatus appearStatus = AppearStatus.AS_NULL;
        public float appearTimeOfDuration;
        public Character owner;
        private float animationPlayTime = 0f;

        protected virtual bool IsLoopAnimation()
        {
            return false;
        }

		public void SetOwner(Character instance)
		{
			owner = instance;
		}

        void Update()
        {
            if (animationPlayTime >= appearTimeOfDuration)
            {
                DeactiveAppear();
                return;
            }

            animationPlayTime += Mathf.Clamp(Time.deltaTime, 0, appearTimeOfDuration - animationPlayTime);
        }

        public static bool PlayAnimation(Character character, string name)
        {

            AnimationState state = character.GetComponent<Animation>()[name];
            if (state)
            {
                character.GetComponent<Animation>().Play(name);
                return true;
            }
            return false;
        }

        public static bool StopAnimation(Character character, string name)
        {

            AnimationState state = character.GetComponent<Animation>()[name];
            if (state)
            {
                character.GetComponent<Animation>().Stop(name);
                return true;
            }
            return false;
        }

        ///<<< END WRITING YOUR CODE

	}

///<<< BEGIN WRITING YOUR CODE NAMESPACE_UNINIT

    ///<<< END WRITING YOUR CODE
}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

